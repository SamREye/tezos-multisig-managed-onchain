archetype multisig_managed_state(
  owner: address,
  signers: set<address>,
  threshold: nat
)

/////////////////////////////////////////////////
// Metadata support
/////////////////////////////////////////////////

entry set_metadata_uri(idata: bytes) {
  called by owner
  effect {
    metadata := put(metadata, "", idata)
  }
}

/////////////////////////////////////////////////
// Multisig
/////////////////////////////////////////////////

variable last_op_id: nat = 0
asset pending_ops to big_map {
  op_id: nat;
  actions: lambda<unit, list<operation>>;
  approvals: set<address>
}

entry default() {
  require {
    r00: length(signers) >= threshold otherwise "FUNDING BLOCKED SINCE PARAMS ARE INVALID";
  }
}

entry propose(
  the_actions: lambda<unit, list<operation>>
) {
  require {
    r10: transferred = 0utz otherwise "TO FUND CONTRACT, PLEASE USE THE DEFAULT ENTRYPOINT";
    r11: signers.contains(caller) otherwise "ONLY FOR SIGNERS";
  }
  effect {
    last_op_id += 1;
    pending_ops.add({
      op_id = last_op_id;
      actions = the_actions;
      approvals = make_set<address>([caller])
    })
  }
}

entry approve(
  the_op_id: nat
) {
  constant {
    my_pending_op ?is pending_ops[the_op_id] otherwise "INVALID OP ID"
  }
  require {
    r20: transferred = 0utz otherwise "TO FUND CONTRACT, PLEASE USE THE DEFAULT ENTRYPOINT";
    r21: signers.contains(caller) otherwise "ONLY FOR SIGNERS";
    r22: not my_pending_op.approvals.contains(caller) otherwise "ALREADY APPROVED";
  }
  effect {
    pending_ops[the_op_id].approvals.add(caller);
  }
}

entry execute(
  the_op_id: nat
) {
  constant {
    my_pending_op ?is pending_ops[the_op_id] otherwise "INVALID OP ID"
  }
  require {
    r30: transferred = 0utz otherwise "TO FUND CONTRACT, PLEASE USE THE DEFAULT ENTRYPOINT";
    r31: signers.contains(caller) otherwise "ONLY FOR SIGNERS";
    r32: length(my_pending_op.approvals) >= threshold otherwise "NOT YET APPROVED";
  }
  effect {
    operations := exec_lambda(pending_ops[the_op_id].actions, Unit);
    pending_ops.remove(the_op_id)
  }
}

view get_approvals(my_op_id: nat): set<address> {
  return match pending_ops[my_op_id] with | none -> make_set<address>([]) | some(v) -> v.approvals end
}

view is_approved(my_op_id: nat): bool {
  const approval_count: nat = match pending_ops[my_op_id] with | none -> 0 | some(v) -> length(v.approvals) end;
  const is_approved: bool = approval_count >= threshold;
  return is_approved
}
